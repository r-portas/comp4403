package parser;

import java_cup.runtime.*;   // Library needed for Java-CUP for parsing
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;

import source.*;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.Operator;
import syms.*;

/** PL0 definition for CUP LALR(1) parser generator.
 * @version $Revision: 22 $Date: 2013-05-08 13:58:21 +1000 (Wed, 08 May 2013)$
 * This module is responsible for parsing the input file in terms
 * of the tokens supplied by the lexical analyser (see PL0.flex),
 * and generating a symbol table skeleton and an abstract syntax 
 * tree for program.
 
 * Java-CUP will output a file "CUPParser.java" that contains the parser
 * for PL0. It also outputs CUPToken.java.
 * The name "CUPParser.java" is determined by the "parser" option and
 * the name "CUPToken.java" by the "symbols" option to the java_cup command 
 * line or to the corresponding ant task.
 */

parser code 
{:  /* This section provides some methods used by Java_CUP during parsing.
       They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Override the default CUP syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void syntax_error( Symbol cur_token ) {
        errors.error( "PL0 syntax error", ((ComplexSymbol) cur_token).xleft );
    }
    /** Override the default CUP unrecovered_syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void unrecovered_syntax_error( Symbol cur_token ) {
        errors.error( "PL0 unrecovered syntax error", 
                        ((ComplexSymbol) cur_token).xleft );
    }
            
:}

action code 
{:  /* This section provides global variables and methods used in the
     * semantics actions associated with parsing rules.
     * These are the only global variables you should need. */

    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** The current symbol table scope is available globally.
     *  Its current scope corresponds to the procedure/main program 
     *  being processed.
     */
    Scope currentScope;

:}


/*--------------------------------------------------------------*
 *--------------------- TERMINAL SYMBOLS -----------------------*
 *--------------------------------------------------------------*
 * CUP generates a file CUPToken.java containing the Java definitions 
 * generated by from the following list of terminal symbols.
 * CUPToken.java is used to communicate with the lexical analyser. 
 * The name "CUPToken.java" is determined by the "symbols" option to java_cup
 * (specified in command line invoking java-cup or in the corresponding ant 
 * task).
 * See PL0.flex for the detailed definitions of the lexical tokens.
 */
terminal
    LPAREN,       /* ( */
    RPAREN,       /* ) */
    SEMICOLON,    /* ; */
    COLON,        /* : */
    ASSIGN,       /* := */
    GETS,         /* <- */
    PLUS,         /* + */
    MINUS,        /* - */
    TIMES,        /* * */
    DIVIDE,       /* / */
    EQUALS,       /* = */
    NEQUALS,      /* != */
    LEQUALS,      /* <= */
    GEQUALS,      /* >= */
    LESS,         /* < */
    GREATER,      /* > */
    RANGE,        /* .. */
    COMMA,        /* , */
    LBRACKET,     /* [ */
    RBRACKET,     /* ] */
    KW_BEGIN,     /* begin */
    KW_CALL,      /* call */
    KW_CONST,     /* const */
    KW_DO,        /* do */
    KW_ELSE,      /* else */
    KW_END,       /* end */
    KW_IF,        /* if */
    KW_PROCEDURE, /* procedure */
    KW_READ,      /* read */
    KW_RETURN,    /* return */
    KW_THEN,      /* then */
    KW_TYPE,      /* type */
    KW_VAR,       /* var */
    KW_WHILE,     /* while */
    KW_WRITE,     /* write */
    ILLEGAL;      /* illegal symbol - not used in grammar */

/** The following terminal symbols have an attribute associated with them.
 */
terminal String  IDENTIFIER;   /* identifier */
terminal Integer NUMBER;       /* number */

/**-------------------------------------------------------------*
 *------------------ NONTERMINAL SYMBOLS -----------------------*
 *--------------------------------------------------------------*
 * Many nonterminals (but not all) have an attribute type associated 
 * with them. This must be a Java class (subclass of Object, e.g., 
 * Integer rather than int). Generic types are allowed.
 * This gives the type of the special attribute RESULT in the grammar 
 * rules in which the nonterminal appears on the left side of a grammar
 * rule, and the type of the attribute corresponding to the label 
 * attached to occurrences of the nonterminal on the right side of a rule.
 *
 * The attributes are used to construct the symbol table for the
 * declaration parts and the abstract syntax tree for the bodies of
 * procedures and the main program.
 */
non terminal DeclNode.ProgramNode Program;
non terminal StatementNode.BlockNode   Block;
non terminal DeclNode.DeclListNode DeclarationList;
non terminal                  Declaration;
non terminal                  ConstDefSeq, 
                              ConstDef;
non terminal ConstExp         Constant;
non terminal                  TypeDefSeq, 
                              TypeDef;
non terminal Type             Type,
                              OptReturnType,
                              TypeIdentifier;
non terminal                  VarDeclSeq, 
                              VarDecl;
non terminal DeclNode.ProcedureNode  ProcedureDef;
non terminal SymEntry.ProcedureEntry ProcedureHead;
non terminal SymEntry.ParamEntry FormalParam;
non terminal 
                            ActualParam,
                            OptActualParams,
                            ActualParamList;
non terminal StatementNode.ListNode StatementList;
non terminal StatementNode    Statement,
                              CompoundStatement;
non terminal ExpNode          Condition,
                              OptDefaultValue,
                              RelCondition,
                              Exp,
                              Term,
                              Factor;
non terminal Operator         Relation,
                              AddOp,
                              MulOp,
                              UnaryOperator;
non terminal ExpNode          LValue;

non terminal List<SymEntry.ParamEntry> FormalParamList,
                              OptFormalParams;

/**-------------------------------------------------------------*
 *------------------------ GRAMMAR RULES -----------------------*
 *--------------------------------------------------------------*
 * Grammar productions have actions associated with them, which are
 * executed after recognising (part of) the right side of the production.
 *  
 * The action is Java code contained between '{:' and ':}'
 * It is allowed to reference the values of attributes of symbols on 
 * the right side (the name of these attributes is the name after the 
 * ':' following a symbol, e.g., in the rule for Program the attribute 
 * associated with Block is 'block'), and assignments to the attribute of 
 * the left side nonterminal (which is always referred to as 'RESULT').
 *
 * Be careful to get the syntax of the '{:' and ':}' correct and to
 * make sure they match up, otherwise the error messages get very
 * confusing. Also don't forget the ";" at the end of a production.
 * 
 * To allow the locations of errors in the input source program to be
 * reported, each attribute, such as "id" associated with IDENTIFIER
 * in the production for ConstDef, has two further attributes "idxleft" 
 * and "idxright", representing the locations (think of a location as
 * a line and column number) of the leftmost and rightmost characters 
 * of the construct in the input source program.
 * Note that the name "idxleft" is constructed from the name "id" by
 * adding "xleft" to it. 
 *
 * Java-CUP has a special non-terminal symbol 'error', which is used to 
 * allow recovery from syntax errors in the program. 
 *
 * The action code usually comes at the end of the right side of a production,
 * however, it is possible to have multiple actions, each of which is executed
 * as soon as the symbols preceding it are matched.
 * For example, for Program the first thing on the right side is an 
 * action, and hence this action is executed before the right side of
 * program (namely Block) is recognised, i.e., before any of the 
 * Program is recognised. The second action following Block is executed
 * after the whole of the Block representing the program is recognised.
 */
Program ::=  /* empty */ 
        {:
            /* This action occurs before the whole program is recognised.
             * Construct initial symbol table with current scope the 
             * predefined scope. */
            SymbolTable symtab = new SymbolTable();
            currentScope = symtab.getPredefinedScope();
            /* Set up a dummy symbol table entry for the main program */
            SymEntry.ProcedureEntry proc = 
                currentScope.addProcedure( "<main>", ErrorHandler.NO_LOCATION );
            if( proc  == null ) {
                errors.fatal( "Could not add main program to symbol table",
                    ErrorHandler.NO_LOCATION );
            }
            /* Enter the scope for the main program and save the new local
             * scope in main's symbol table entry */
            currentScope = currentScope.newScope( proc );
        :}
     Block:block
        {: 
            /* Returned result of the whole parsing phase */
            RESULT = new DeclNode.ProgramNode( currentScope, block );
            /* This action is executed after the whole program 
             * has been recognised */
            currentScope = currentScope.getParent();
        :}
    | error
        {:
            /* A null result from Program will cause the compiler to
               avoid further processing. */
            RESULT = null;
        :}
    ;
Block ::= DeclarationList:dl CompoundStatement:b
        {: 
            RESULT = new StatementNode.BlockNode( bxleft, dl, b, currentScope );
        :}
    ;
DeclarationList ::= DeclarationList:dl ProcedureDef:p SEMICOLON
        {:
            dl.addDeclaration(p);
            RESULT = dl;
        :}
    | DeclarationList:dl Declaration
        {: 
            RESULT = dl;
        :}
    | /* empty */
        {:
            RESULT = new DeclNode.DeclListNode();
        :}
    ;

Declaration ::= KW_CONST ConstDefSeq
    |  KW_TYPE TypeDefSeq
    |  KW_VAR  VarDeclSeq
    ;

ConstDefSeq ::= ConstDef
    |  ConstDefSeq ConstDef
    ;

ConstDef ::= IDENTIFIER:id EQUALS Constant:c SEMICOLON
        {: 
            /* The attribute idxleft represents the location of the start
             * character of the IDENTIFIER token in the input stream.
             */
            /* addConstant returns null if id is already defined 
             * in the current scope */
            if( currentScope.addConstant( id, idxleft, c ) == null ) {
                errors.error( id + " already defined", idxleft );
            }
        :}
    |  error 
    ;
/* The rules for Constant construct a (mini) abstract syntax tree 
 * for constant expressions (not to be confused with ExpNodes).
 */
Constant ::= NUMBER:n
        {: 
            RESULT = new ConstExp.NumberNode( nxleft, currentScope, 
                                              Predefined.INTEGER_TYPE, n ); 
        :}
    |  MINUS:op Constant:c
        {: 
            RESULT = new ConstExp.NegateNode( opxleft, currentScope, c ); 
        :}
    |  IDENTIFIER:id
        {: 
            RESULT = new ConstExp.ConstIdNode( idxleft, currentScope, id );
        :}
    |  error:err
        {:
            RESULT = new ConstExp.ErrorNode( errxleft, currentScope );
        :}
    ;

TypeDefSeq ::= TypeDef 
    |  TypeDefSeq TypeDef
    ;

TypeDef ::= IDENTIFIER:id EQUALS Type:type SEMICOLON
        {: 
            SymEntry.TypeEntry entry = currentScope.addType( id, idxleft, type );
            if( entry == null ) {
                errors.error( id + " already defined", idxleft );
            }
        :}
    |  error 
    ;

Type ::= TypeIdentifier:type
        {: 
            RESULT = type;
        :}
    | LBRACKET Constant:lo RANGE Constant:hi RBRACKET
        {:
            RESULT = new Type.SubrangeType( lo, hi );
        :}
    | error:err
        {:
            RESULT = Type.ERROR_TYPE;
        :}
    ;
TypeIdentifier ::= IDENTIFIER:id
        {: /* As the type identifier may not be defined at this point
            * the abstract syntax tree records the id, as well as the 
            * symbol table context to look it up within later.
            */
            RESULT = new Type.IdRefType( id, currentScope, idxleft );
        :}
    ;

VarDeclSeq ::= VarDecl
    |  VarDeclSeq VarDecl
    ;

VarDecl ::= IDENTIFIER:id COLON TypeIdentifier:type SEMICOLON
        {: 
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType( type );
            if(currentScope.addVariable(id, idxleft, varType) == null) {
                errors.error( id + " already declared", idxleft );
            }
        :}
    |  error
    ;
    
ProcedureDef ::= ProcedureHead:procEntry EQUALS Block:b
        {:
            /* Executed after recognising the whole procedure */
            currentScope = currentScope.getParent();
            RESULT = new DeclNode.ProcedureNode( procEntry, b );
        :}
    ;

ProcedureHead ::= KW_PROCEDURE IDENTIFIER:id LPAREN FormalParamList:pl RPAREN OptReturnType:ort
        {: 
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            procEntry = currentScope.addProcedure( id, idxleft );
            if( procEntry == null ) {
                errors.error( id + " already declared", idxleft );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, idxleft );
                procEntry.setScope( currentScope );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            currentScope = currentScope.newScope( procEntry );

            // Set up the return type and formal parameters
            Type.ProcedureType procType = procEntry.getType();

            // Set the result type, will either be a Type or null
            procType.setResultType(ort);

            RESULT = procEntry;
        :}
    |  KW_PROCEDURE IDENTIFIER:id error
        {: 
            SymEntry.ProcedureEntry procEntry = 
                new SymEntry.ProcedureEntry( id, idxleft );
            procEntry.setScope( currentScope );
            currentScope = currentScope.newScope( procEntry );
            RESULT = procEntry;
        :}
    ;

/* The optional return type */
OptReturnType ::= COLON TypeIdentifier:ti
        {:
            RESULT = ti;    
        :}
    |  /* empty */
        {:
            RESULT = null;
        :}
    ;

FormalParam ::= IDENTIFIER:id COLON TypeIdentifier:ti OptDefaultValue:odf
        {:
            // Create a new reference type to ti
            Type.ReferenceType refType = new Type.ReferenceType(ti);

            SymEntry.ParamEntry param = new SymEntry.ParamEntry(id, idxleft, refType);

            // Set the default parameter, will either be a ExpNode or null
            param.setDefaultParam(odf);

            RESULT = param;

        :}
    ;

OptDefaultValue ::= GETS Condition:c
        {:
            // Return the condition
            RESULT = c;
        :}
    |  /* empty */
        {:
            // No default value
            RESULT = null;
        :}
    ;

/* To allow for the addition of procedure parameters. */
FormalParamList ::= FormalParam:fp OptFormalParams:ofp
        {:
            // Add the first parameter
            ofp.add(fp);

            RESULT = ofp;
        :}
    | /* empty */
        {:
            // Return an empty list
            List<SymEntry.ParamEntry> params = new ArrayList<SymEntry.ParamEntry>();
            RESULT = params;
        :}
    ;

OptFormalParams ::= COMMA FormalParam:fp OptFormalParams:ofp
        {:
            // Add to the current list then return
            ofp.add(fp);
            RESULT = ofp;
        :}
    |  /* empty */
        {:
            // Create the list
            RESULT = new ArrayList<SymEntry.ParamEntry>();
        :}
    ;

CompoundStatement ::= KW_BEGIN StatementList:sl KW_END
        {:
            RESULT = sl;
        :}
    ;

StatementList ::= Statement:s
        {:
            RESULT = new StatementNode.ListNode( sxleft );
            RESULT.addStatement(s);
        :}
    |  StatementList:sl SEMICOLON Statement:s
        {:
            sl.addStatement( s );
            RESULT = sl;
        :}
    ;

Statement ::= KW_WHILE Condition:c KW_DO Statement:s
        {: 
            RESULT = new StatementNode.WhileNode( cxleft, c, s );
        :}
    |  KW_IF Condition:c KW_THEN Statement:s1 KW_ELSE Statement:s2
        {: 
            RESULT = new StatementNode.IfNode( cxleft, c, s1, s2 );
        :}
    |  CompoundStatement:s
        {: 
            RESULT = s; 
        :}
    | KW_READ:r LValue:lval
        {: 
            RESULT = new StatementNode.AssignmentNode( lvalxleft, 
                     lval, new ExpNode.ReadNode( rxleft ) );
        :}
    |  KW_WRITE Exp:e
        {: 
            RESULT = new StatementNode.WriteNode( exleft, e );
        :}
    | LValue:lval ASSIGN Condition:rval
       {:
          RESULT = new StatementNode.AssignmentNode( lvalxleft, lval, rval );
       :} 
    |  KW_CALL IDENTIFIER:id LPAREN ActualParamList:pl RPAREN
        {: 
            RESULT = new StatementNode.CallNode( idxleft, id );
        :}
    | KW_RETURN Condition:c
        {:
            // Return a statement node for the return statement?
        :}
    |  error:p 
        {: 
            RESULT = new StatementNode.ErrorNode( pxleft );
        :}
    ;

ActualParamList ::= ActualParam:ap OptActualParams:oap
        {:
            // TODO 
        :}
    | /* empty */
        {:
            // TODO
        :}
    ;

OptActualParams ::= COMMA ActualParam:ap OptActualParams:oap
        {:
            // TODO
        :}
    | /* empty */
        {:
            // TODO
        :}
    ;

ActualParam ::= IDENTIFIER:id GETS Condition:c
        {:
            // TODO
        :}
    ;

LValue ::= IDENTIFIER:id
        {:
            RESULT = new ExpNode.IdentifierNode( idxleft, id );
        :}
    ;

/* To allow for adding logical expressions. */
Condition ::= RelCondition:e
        {: 
            RESULT = e;
        :}
    ;
/* Relational operators are lower precedence than arithmetic operators. */
RelCondition ::= Exp:e 
        {:
            RESULT = e;
        :}
    |  Exp:e1 Relation:op Exp:e2
        {:
            RESULT = new ExpNode.OperatorNode( opxleft,
                op, new ExpNode.ArgumentsNode(e1,e2) );
        :} 
    ;

Relation ::= EQUALS
        {:
            RESULT = Operator.EQUALS_OP;
        :}
    |  NEQUALS
        {:
            RESULT = Operator.NEQUALS_OP;
        :}
    |  LEQUALS
        {:
            RESULT = Operator.LEQUALS_OP;
        :}
    |  LESS
        {:
            RESULT = Operator.LESS_OP;
        :}
    |  GREATER
        {:
            RESULT = Operator.GREATER_OP;
        :}
    |  GEQUALS
        {:
            RESULT = Operator.GEQUALS_OP;
        :}
    ;
/* Expressions are structured into Exp, Term, and Factor to encode the
 * precedence of the operators in the grammar.
 */
Exp ::= Term:t
        {:
            RESULT = t;
        :}
    |  Exp:e1 AddOp:op Term:e2
        {:
            RESULT = new ExpNode.OperatorNode( opxleft, op,
                new ExpNode.ArgumentsNode(e1,e2) );
        :}
    ;

AddOp ::= PLUS
        {:
            RESULT = Operator.ADD_OP;
        :}
    |  MINUS
        {:
            RESULT = Operator.SUB_OP;
        :}
    ;

Term ::= Factor:f
        {:
            RESULT = f;
        :}
    |  Term:e1 MulOp:op Factor:e2
        {:
            RESULT = new ExpNode.OperatorNode( opxleft, op,
                new ExpNode.ArgumentsNode(e1,e2) );
        :}
    ;

MulOp ::= TIMES
        {:
            RESULT = Operator.MUL_OP;
        :}
    |  DIVIDE
        {:
            RESULT = Operator.DIV_OP;
        :}
    ;

Factor ::= PLUS Factor:e
        {:
            RESULT = e; 
        :}
    |  UnaryOperator:op Factor:e
        {:
            RESULT = new ExpNode.OperatorNode( opxleft, op, e );
        :}
    |  LPAREN Condition:c RPAREN
        {:
            RESULT = c;
        :}
    |  NUMBER:n
        {:
            RESULT = new ExpNode.ConstNode( nxleft, 
                    Predefined.INTEGER_TYPE, n.intValue() );
        :}
    |  LValue:lval
        {:
            RESULT = lval;
        :}
    | IDENTIFIER:id LPAREN ActualParamList RPAREN
        {:
            // TODO
        :}
    | error:e
        {:
            RESULT = new ExpNode.ErrorNode( exleft );
        :}
    ;
UnaryOperator ::= MINUS:op
        {:
            RESULT = Operator.NEG_OP;
        :}
    ;

